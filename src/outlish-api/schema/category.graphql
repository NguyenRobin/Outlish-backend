extend type Mutation {
  createCategory(input: CreateCategoryInput!): Category
}

extend type Query {
  getProductsByCategory(input: CategoryQuery!): ProductsByCategoryResult
  getProductsBySubCategory(
    input: CategoryAndSubCategoryQuery!
  ): ProductsBySubCategoryResult
  getAllCategories: [AllCategoriesResult]
  getCategory(input: CategoryQuery): [AllCategoriesResult]
}

# input structure client must use
input CategoryAndSubCategoryQuery {
  category: String!
  subCategory: String!
}

# input structure client must use
input CreateCategoryInput {
  category: String!
  subCategory: String
  subSubCategory: String
}
# input structure client must use
input CategoryQuery {
  category: String!
}

# Result structure send back to client
type Category {
  category: String
  subCategory: String
  subSubCategory: String
}

type SubSubCategory {
  name: String
  slug: String
}

type SubCategory {
  name: String
  slug: String
  subSubCategory: [SubSubCategory]
}

# Result structure send back to client
type AllCategoriesResult {
  name: String
  slug: String
  subCategory: [SubCategory]
}

# Result structure send back to client
type ProductsByCategoryResult {
  result: Int
  products: [Product]
}

# Result structure send back to client
type ProductsBySubCategoryResult {
  result: Int
  products: [Product]
}
# Result structure send back to client
type ProductsBySubSubCategoryResult {
  result: Int
  products: [Product]
}
