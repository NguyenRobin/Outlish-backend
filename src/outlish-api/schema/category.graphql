extend type Mutation {
  createCategory(input: CreateCategoryInput): Category
}

extend type Query {
  getProductsByCategory(input: CategoryQuery): ProductsByCategoryResult
  getProductsBySubCategory(
    input: CategoryAndSubCategoryQuery
  ): ProductsSubCategoryResult
  getAllCategories: [Category]
}

input CategoryAndSubCategoryQuery {
  category: String
  subCategory: String
}

# input structure client must use
input CreateCategoryInput {
  category: String!
  subCategory: String
  subSubCategory: String
}
# input structure client must use
input CategoryQuery {
  category: String
}

# Result structure send back to client
type Category {
  category: String
  subCategory: [String]
  subSubCategory: [String]
}

# Result structure send back to client
type ProductsByCategoryResult {
  result: Int
  products: [Product]
}

# Result structure send back to client
type ProductsSubCategoryResult {
  result: Int
  products: [Product]
}
# Result structure send back to client
type ProductsSubSubCategoryResult {
  result: Int
  products: [Product]
}
